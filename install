#!/usr/bin/env python
"""
Usage:
    install -h | --help
    install system
    install requirements [-u]
    install path

Description:

    install system
        install some important packages that are essential for 
        cloudmesh instalation. This command has to be called first.
        Once you have installed the command more options will be 
        available.

    install requirements [-u]
        Installs the requirements in the order as given in the requirements.txt file.
        if the -u option is specified each package is also updated.
        
    install path
        lists the available sys.path for debugging purposes.

"""
import time
from textwrap import dedent
from pprint import pprint
import os
import getopt
import sys
from cloudmesh_common.util import banner
from cloudmesh_install.util import get_system
from cloudmesh_install import config_file_prefix

def print_help():

    deep_commands = ""
    try:
        from cloudmesh_install.install import install_command
        deep_commands = dedent(install_command.__doc__)
    except:
        deep_commands = ""
    documentation = __doc__.split("\n") + deep_commands.split("\n")
    print "\n".join(documentation)


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])
        if (opts == [] and args == []):
            banner("ERROR: no parameter defined")
            print_help()
            sys.exit(1)
    except getopt.error, msg:
        print msg
        banner("for help use --help")
        sys.exit(2)

    # parse for help
    for o, a in opts:
        if o in ("-h", "--help"):
            print_help()
            sys.exit(0)

    #
    if "help" in args:
        print_help()
        sys.exit(0)

    if "requirements" in args:
        if "-u" in args or "--upgrade" in args:
            upgrade = "--upgrade"
        else:
            upgrade = ""
        try:
            f = open('requirements.txt', 'rU') 
            for line in f:
                line = line.rstrip()
                if line.startswith("#"):
                    print line
                else:
                        banner (line, c="-")
                        try:
                            os.system("pip install '{0}' {1}".format(line, upgrade))
                        except Exception, e:
                            print e
                            sys.exit(1)
        except Exception, e:
            print "ERROR: There is a problem"
            print e
            
        # In some linux distributions (Ubuntu, others?)
        # fabric does not install properly until the
        # preceeding requirements are in place.
        # os.system("pip install fabric")

        # To prevent errors building API docs, we need a
        # cloudmesh.yaml and cloudmesh_server.yaml to exist.
        os.system("bash -c 'mkdir -m 0700 -p ~/{0}'".format(config_file_prefix()))
        os.system(
            "bash -c 'test -f ~/{0}/cloudmesh.yaml || touch ~/{0}/cloudmesh.yaml'".format(config_file_prefix()))
        os.system(
            "bash -c 'test -f ~/{0}/cloudmesh_server.yaml || touch ~/{0}/cloudmesh_server.yaml'".format(config_file_prefix()))

        sys.exit(0)

    if "path" in args:

        banner("sys.path", c="-")
        pprint(sys.path)
        banner("-")
        sys.exit(0)

    if "system" in args:

        banner("system")

        os_system = get_system()

        try:
            os.system("bin/prepare-%s.sh" % os_system)
        except:
            print "OS distribution not supported; please see documatation for manual installation instructions.", os_system
            #sys.exit(1)

        if sys.platform in ['darwin']:
            from cloudmesh_install.install import osx
            osx()

        sys.exit(0)

    arguments = ' '.join(args)
    banner(arguments)
    try:

        from cloudmesh_install.install import install_command
        install_command(arguments)

    except Exception, e:
        print "ERROR: Your environment may not be properly configured."
        print "       Have you run the following command?"
        print
        print "         install system"
        print
        print e


if __name__ == "__main__":
    main()
